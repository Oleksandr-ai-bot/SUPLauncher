#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ SUPLAUNCHER –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
"""

import os
import sys
import shutil
import subprocess
import platform
from pathlib import Path


def get_platform_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
    system = platform.system().lower()
    architecture = platform.machine().lower()

    if system == "windows":
        return "windows", "exe"
    elif system == "darwin":
        return "macos", "app"
    else:
        return "linux", "bin"


def clean_build():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–±–æ—Ä–∫–∏"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫...")

    dirs_to_clean = ["build", "dist", "__pycache__"]

    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   ‚úì –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")

    # –£–¥–∞–ª—è–µ–º .spec —Ñ–∞–π–ª—ã
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"   ‚úì –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {spec_file}")


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏...")

    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install",
            "pyinstaller", "pillow"
        ], check=True)
        print("   ‚úì –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

    return True


def create_assets_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("üé® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

    assets_dir = Path("assets")
    if not assets_dir.exists():
        assets_dir.mkdir()
        print("   ‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è assets")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    subdirs = ["fonts", "icons", "images", "sounds", "styles"]
    for subdir in subdirs:
        subdir_path = assets_dir / subdir
        if not subdir_path.exists():
            subdir_path.mkdir()
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: assets/{subdir}")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã-–∑–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    placeholder_files = {
        "icons/app_icon.ico": "placeholder icon",
        "images/logo.png": "placeholder image",
        "fonts/inter.ttf": "placeholder font",
        "styles/main.qss": "/* placeholder styles */"
    }

    for file_path, content in placeholder_files.items():
        full_path = assets_dir / file_path
        if not full_path.exists():
            full_path.parent.mkdir(parents=True, exist_ok=True)
            full_path.write_text(content)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞: assets/{file_path}")


def build_executable():
    """–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    platform_name, extension = get_platform_info()

    print(f"üî® –°–±–æ—Ä–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_name}")

    # –ë–∞–∑–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã PyInstaller
    args = [
        sys.executable, "-m", "PyInstaller",
        "--name=SUPLAUNCHER",
        "--windowed",
        "--onedir",  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        "--clean",
        "--noconfirm",
        f"--add-data=assets{os.pathsep}assets",
        f"--add-data=src{os.pathsep}src",
    ]

    # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if platform_name == "windows":
        if os.path.exists("assets/icons/app_icon.ico"):
            args.append("--icon=assets/icons/app_icon.ico")
        args.extend([
            "--console",  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            "--version-file=version.txt"  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏
        ])

    elif platform_name == "macos":
        if os.path.exists("assets/icons/app_icon.icns"):
            args.append("--icon=assets/icons/app_icon.icns")
        args.extend([
            "--osx-bundle-identifier=ru.villadesup.suplauncher",
        ])

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    excludes = [
        "tkinter", "matplotlib", "numpy", "scipy",
        "pandas", "IPython", "jupyter"
    ]

    for exclude in excludes:
        args.extend(["--exclude-module", exclude])

    # –°–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    hidden_imports = [
        "PySide6.QtCore",
        "PySide6.QtWidgets",
        "PySide6.QtGui",
        "minecraft_launcher_lib",
        "requests",
        "PIL",
        "rich"
    ]

    for hidden in hidden_imports:
        args.extend(["--hidden-import", hidden])

    # –î–æ–±–∞–≤–ª—è–µ–º main.py
    args.append("main.py")

    print("   –ó–∞–ø—É—Å–∫ PyInstaller...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(args)}")

    try:
        subprocess.run(args, check=True)
        print("   ‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False


def post_build_cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"""
    print("üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")

    # –£–¥–∞–ª—è–µ–º build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if os.path.exists("build"):
        shutil.rmtree("build")
        print("   ‚úì –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build")

    # –£–¥–∞–ª—è–µ–º .spec —Ñ–∞–π–ª
    spec_files = list(Path(".").glob("*.spec"))
    for spec_file in spec_files:
        spec_file.unlink()
        print(f"   ‚úì –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {spec_file}")


def create_distribution():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞"""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞...")

    platform_name, extension = get_platform_info()
    dist_dir = Path("dist")

    if not dist_dir.exists():
        print("   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    suplauncher_dir = dist_dir / "SUPLAUNCHER"
    if not suplauncher_dir.exists():
        print("   ‚ùå –°–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

    # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    additional_files = ["README.md", "LICENSE", "requirements.txt"]

    for file_name in additional_files:
        if os.path.exists(file_name):
            shutil.copy2(file_name, suplauncher_dir)
            print(f"   ‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_name}")

    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    archive_name = f"SUPLAUNCHER-v1.0.0-{platform_name}"

    if platform_name == "windows":
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è Windows
        shutil.make_archive(
            f"dist/{archive_name}",
            "zip",
            "dist",
            "SUPLAUNCHER"
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {archive_name}.zip")

    else:
        # –°–æ–∑–¥–∞–µ–º TAR.GZ –∞—Ä—Ö–∏–≤ –¥–ª—è Linux/macOS
        shutil.make_archive(
            f"dist/{archive_name}",
            "gztar",
            "dist",
            "SUPLAUNCHER"
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {archive_name}.tar.gz")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print("üöÄ SUPLAUNCHER Build Script")
    print("=" * 50)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists("main.py"):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª main.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
            return 1

        # –≠—Ç–∞–ø—ã —Å–±–æ—Ä–∫–∏
        steps = [
            ("–û—á–∏—Å—Ç–∫–∞", clean_build),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
            ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤", create_assets_structure),
            ("–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞", build_executable),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞", create_distribution),
            ("–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", post_build_cleanup)
        ]

        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            if not step_func():
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                return 1

        print("\n" + "=" * 50)
        print("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist/")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        dist_dir = Path("dist")
        if dist_dir.exists():
            total_size = sum(f.stat().st_size for f in dist_dir.rglob('*') if f.is_file())
            size_mb = total_size / (1024 * 1024)
            print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")

        return 0

    except KeyboardInterrupt:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

# –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Æ—Ä–∞
